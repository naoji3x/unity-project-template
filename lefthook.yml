# Git hooks for development workflow
pre-commit:
  parallel: true
  commands:
    format-markdown:
      glob: '*.md'
      run: npx prettier --write {staged_files}
      stage_fixed: true

    lint-markdown:
      glob: '*.md'
      run: npx markdownlint {staged_files}

    lint-changelog:
      glob: 'CHANGELOG.md'
      run: |
        npx markdownlint --config .markdownlint-changelog.json CHANGELOG.md
        node scripts/check-changelog-format.mjs

    format-js:
      glob: '*.{js,mjs,ts,tsx,json}'
      run: npx prettier --write {staged_files}
      stage_fixed: true

    lint-js:
      glob: '*.{js,mjs,ts,tsx}'
      run: npx eslint {staged_files} --max-warnings 0

    format-csharp:
      glob: 'Assets/{Scripts,TinyShrine}/**/*.cs'
      run: |
        # ステージ済みの .cs を NUL 区切りで安全に取得（スペース/日本語パスOK）
        tmp="$(mktemp)"
        git -c core.quotepath=false diff --cached --name-only -z --diff-filter=ACM -- \
          'Assets/Scripts/**/*.cs' \
          'Assets/TinyShrine/**/*.cs' > "$tmp"

        if [ ! -s "$tmp" ]; then
          echo "No C# files to check."
          rm -f "$tmp"
          exit 0
        fi

        dotnet tool restore

        # 1 ファイルずつ安全にチェック
        rc=0
        while IFS= read -r -d '' file; do
          [ -z "$file" ] && continue
          echo "checking: $file"
          dotnet tool run csharpier format "$file" || rc=1
        done < "$tmp"

        rm -f "$tmp"
        exit $rc
      stage_fixed: true

    lint-csharp:
      glob: 'Assets/{Scripts,TinyShrine}/**/*.cs'
      run: |
        # ステージ済みの .cs を NUL 区切りで安全に取得（スペース/日本語パスOK）
        tmp="$(mktemp)"
        git -c core.quotepath=false diff --cached --name-only -z --diff-filter=ACM -- \
          'Assets/Scripts/**/*.cs' \
          'Assets/TinyShrine/**/*.cs' > "$tmp"

        if [ ! -s "$tmp" ]; then
          echo "No C# files to check."
          rm -f "$tmp"
          exit 0
        fi

        # 1 ファイルずつ安全にチェック
        rc=0
        while IFS= read -r -d '' file; do
          [ -z "$file" ] && continue
          echo "checking: $file"
          dotnet format analyzers ./Lint.csproj \
            --include "$file" \
            --exclude-diagnostics CS0246 IDE0005 \
            --verify-no-changes \
            --verbosity minimal || rc=1
        done < "$tmp"

        rm -f "$tmp"
        exit $rc

commit-msg:
  commands:
    commitlint:
      run: npx commitlint --edit $1
